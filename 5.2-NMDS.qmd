---
title: "Nonmetric Multidimensional Scaling"
author:
  - Elizabeth King
  - Kevin Middleton
format:
  revealjs:
    theme: [default, custom.scss]
    standalone: true
    self-contained: true
    slide-number: true
    show-slide-number: all
bibliography: Multivariate.bib
csl: evolution.csl
---


```{r}
#| label: setup
#| echo: false
#| warning: false
#| message: false

library(tidyverse)
library(cowplot)
library(vegan)
library(gt)

ggplot2::theme_set(theme_cowplot())
```


## NMDS vs. PCA

- When the goal doesn't include preserving *exact* distances
    - PCA uses Euclidean distance
- NMDS preserves the rank ordering of distances
    - Like a non-parametric version of PCA
- No need for multivariate normality
- Missing data less of a problem
    - As long as the *relative* order can be determined from the other data

<div class="ref">
Legendre and Legendre [-@Legendre1998-ca]
</div>


## NMDS is *very* flexible, but...

- Not an eigenanalysis technique
- Does not maximize the variability associated with individual axes of the ordination
    - Rotations are arbitrary, not orthogonal
    - Plots can be inverted, rotated, etc. for interpretation 


## General method

1. Define original data points in multidimensional space based on distances between sites
2. Specify the number of reduced dimensions you want (often 2 or 3)
3. Construct an initial configuration of the data
4. Compare distances in this initial configuration against calculated distances
5. Determine *stress* on data points
6. Adjust the position of the points in the dimensional space you have chosen (e.g., 2D) to minimize stress for all points


## Stress

- Difference between the distance values from multidimensional space calculated from the original distance matrix and the distance between points in the reduced dimension
- "Pulling on all points a little bit so no single point is completely wrong, all points are a little off compared to distances"
- Iteratively adjust until the stress value is minimized or reaches a predetermined tolerance.


## NMDS challenges

- Computationally intensive: $\mathcal{O} (n^2)$
- No guarantee of finding the best solution
    - Risk of finding local minima
    - "Non-linear optimization is a hard task" [@Borcard2011-ks]
- Use many random start values and compare final stress as a metric of goodness-of-fit


## Columbia Basin Project

The [Columbia Basin Project](https://www.usbr.gov/pn/grandcoulee/cbp/index.html) created dams and interconnected formerly isolated waterways via hundreds of miles of canals and thousands of miles of drainages and other connections.  

![](https://media.defense.gov/2019/Apr/21/2002468397/-1/-1/0/161118-A-A1408-301.JPG){fig-align="center"}


## Zooplankton

Strecker and Brittain [-@Strecker2017-ke] explored the diversity of zooplankton as a function of habitat connections.

> "How does increasing connectivity of waterways alter aquatic zooplankton community?"


## Dataset

```{r}
#| echo: true

Zoo <- read_csv("Data/Strecker_zooplankton.csv", show_col_types = FALSE)
```

```{r}
head(Zoo)
```

## NMDS in R

- `vegan::metaMDS()`
- `ecodist::nmds()`
- `MASS::sammon()` and `MASS::isoMDS`


## `metaMDS()`

Follows recommendations of Minchin [-@Minchin1987-ep]

- Bray-Curtis distance is the default
- `try = 20`: Random start positions
- `autotransform = FALSE`: Can automatically apply transformations
- `expand = FALSE`: `Zoo` data are already standardized
- Final PCA rotation to reorient the principal axes


## NMDS on zooplankton variables

```{r}
#| echo: true
#| output-location: slide

set.seed(4575) # Set the seed

Zoo_k2 <- metaMDS(Zoo[ , -1],
                  k = 2,
                  try = 20,
                  trymax = 50,
                  distance = "bray",
                  autotransform = FALSE,
                  expand = FALSE)
```

## Plotting 1

Interpretation is *relative ordering* of points

- `type = "p"` plots points
    - `o` are sites
    - `+` are species
- Proximity $\approx$ Similarity

```{r}
#| echo: true
#| output-location: slide

plot(Zoo_k2, type = "p", cex = 2)
```


## Plotting 2

- `type = "t"` labels site and species names

```{r}
#| echo: true
#| output-location: slide

plot(Zoo_k2, type = "t", cex = 1)
```


## Comparing stress

```{r}
#| echo: true
#| output: false

set.seed(3742783)
Zoo_k1 <- metaMDS(Zoo[ , -1],
                  k = 1,
                  try = 20,
                  distance = "bray",
                  autotransform = FALSE,
                  expand = FALSE)

Zoo_k3 <- metaMDS(Zoo[ , -1],
                  k = 3,
                  try = 20,
                  distance = "bray",
                  autotransform = FALSE,
                  expand = FALSE)

```


## Comparing stress

```{r}
tibble(k = 1:3,
       Stress = c(Zoo_k1$stress, Zoo_k2$stress, Zoo_k3$stress)) |> 
  ggplot(aes(k, Stress)) +
  geom_point(color = "firebrick4", size = 4) +
  geom_line(color = "firebrick4", linewidth = 1.5) +
  scale_x_continuous(breaks = 1:3) +
  theme_classic()
```


## Evaluating stress [@Clarke1993-oq]

For stress on a 0 to 1 scale:

```{r}
tribble(
  ~ `Stress`, ~ "Interpretation",
  "<0.05",	"Excellent representation with no prospect of misinterpretation",
  "<0.10", "Good ordination with no real disk of drawing false inferences",
  "<0.20",	"Can be useful but has potential to mislead. Don't place too much confidence in the details",
  ">0.20", "Could be dangerous to interpret",
  ">0.35", "Samples placed essentially at random; little relation to original ranked distances"
) |> 
  gt() |> 
  cols_label(Stress = md("**Stress**"),
             Interpretation = md("**Interpretation**")) |> 
  tab_options(table.font.size = 30)

```


## Environment data

- Mixture of categorical and continuous variables
- NAs present

```{r}
Env <- read_csv("Data/Strecker_env.csv", show_col_types = FALSE) |> 
  mutate(across(category:type, factor))
Env
```


## Fit environment data onto an ordination

- Find the maximum correlation between species and environmental data

Check that the rows are in the same order:

```{r}
#| echo: true

all.equal(Env$site, Zoo$site)
```


## `vegan::envfit()`

```{r}
#| echo: true

set.seed(347274)

Zoo_Env <- envfit(Zoo_k2, env = Env[, -1], na.rm = TRUE, perm = 999)
scores(Zoo_Env, "vectors")
```

```{r}
#| echo: true
#| output-location: slide

print(Zoo_Env)
```


## Plotting

1. Plot NMDS ordination
2. Add `envfit` object

```{r}
#| echo: true
#| output-location: slide

plot(Zoo_k2, disp = "sites", cex = 2)
plot(Zoo_Env, cex = 1)
```


## Surface plot

```{r}
#| echo: true
#| output-location: slide

ordisurf(Zoo_k2, Env$surface_temp, cex = 2)
```


## Spider plots

```{r}
#| echo: true

plot(Zoo_k2, disp = "sites")
ordispider(Zoo_k2, Env$type, label = TRUE)
```


## References

::: {#refs}
:::

