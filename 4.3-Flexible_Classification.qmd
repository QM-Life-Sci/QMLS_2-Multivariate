---
title: "Flexible Classification"
author:
  - Elizabeth King
  - Kevin Middleton
format:
  revealjs:
    theme: [default, custom.scss]
    standalone: true
    self-contained: true
    logo: QMLS_Logo.png
    slide-number: true
    show-slide-number: all
bibliography: Multivariate.bib
csl: evolution.csl
---


```{r}
#| label: setup
#| echo: false
#| warning: false
#| message: false

library(tidyverse)
library(cowplot)
library(rsample)
library(mvtnorm)

ggplot2::theme_set(theme_cowplot())

SD2 <- read_rds("Data/SD2.rds")
SD3 <- read_rds("Data/SD3.rds")
```


## DFA / LDA

Linear separation of groups


## Outline

- QDA `MASS::qda()`
- SVM [@Hastie2009-xa; @James2013-oe]
    - [https://www.quora.com/Why-is-a-support-vector-machine-called-a-machine](https://www.quora.com/Why-is-a-support-vector-machine-called-a-machine)
- FDA [@Hastie1994-mt; @Hastie2009-xa]


## Simulated data

```{r}
ggplot(SD3, aes(X1, X2, color = Group)) +
  geom_point(size = 3) +
  coord_equal() +
  scale_color_brewer(type = "qual", palette = "Set1")
```


## Create training and testing sets

- [`rsample` package](https://rsample.tidymodels.org/index.html)
- Also [`cvTools`](https://cran.r-project.org/web/packages/cvTools/index.html) (among others)

```{r}
#| echo: true

library(rsample)

set.seed(34598734)

split <- initial_split(SD3, strata = Group, prop = 0.75) 

Training_set <- training(split) 
Test_set <- testing(split)
```


## Counts

```{r}
#| echo: true

Training_set |> count(Group)
Test_set |> count(Group)
```


## QDA intro


## QDA

```{r}
#| echo: true

library(MASS)
QDA_fit <- qda(Training_set[, 2:3], Training_set[, 1])
QDA_fit
```


## Predicting the test set results 

```{r}
#| echo: true

(Group_pred <- predict(QDA_fit, newdata = Test_set[, -1])) 
```


## Confusion matrix

```{r}
#| echo: true

table(Test_set[, 1], Group_pred$class) 
```


## Predicting

```{r}
#| echo: true

Grid <- crossing(X1 = seq(min(SD3$X1), max(SD3$X1), length.out = 100),
                 X2 = seq(min(SD3$X2), max(SD3$X2), length.out = 100))
Grid <- Grid |> 
  mutate(Train_pred = predict(QDA_fit, newdata = Grid)$class)

head(Grid)
```


## Plotting the training data set results

```{r}
P1 <- ggplot() +
  geom_tile(data = Grid, aes(X1, X2, fill = Train_pred), alpha = 0.25) +
  geom_point(data = Training_set, aes(X1, X2, color = Group)) +
  scale_color_brewer(type = "qual", palette = "Set1") +
  scale_fill_brewer(type = "qual", palette = "Set1") +
  theme(legend.position = "none") +
  labs(title = "QDA Training")

# Plotting the test data set results 
P2 <- ggplot() +
  geom_tile(data = Grid, aes(X1, X2, fill = Train_pred), alpha = 0.25) +
  geom_point(data = Test_set, aes(X1, X2, color = Group)) +
  scale_color_brewer(type = "qual", palette = "Set1") +
  scale_fill_brewer(type = "qual", palette = "Set1") +
  theme(legend.position = "none") +
  labs(title = "QDA Testing")

plot_grid(P1, P2)

```


## SVM intro

- Kernel types


## SVM

[`e1071` package](https://cran.r-project.org/web/packages/e1071/index.html)

- Functions for latent class analysis, short time Fourier transform, fuzzy clustering, support vector machines, shortest path computation, bagged clustering, naive Bayes classifier, generalized k-nearest neighbour

```{r}
library(e1071) 
```


## Fitting SVM to the Training set 

```{r}
#| echo: true

SVM_fit <- svm(Group ~ X1 + X2, 
               data = Training_set, 
               scale = TRUE,
               type = "C-classification", 
               kernel = "radial",
               cost = 5) 
```


## Predicting the Test set results 

```{r}
#| echo: true

(Group_pred <- predict(SVM_fit, newdata = Test_set[, -1]) )
```


## Confusion matrix

```{r}
#| echo: true

table(Test_set[, 1], Group_pred) 
```


## Predicting

```{r}
#| echo: true

Grid <- crossing(X1 = seq(min(SD3$X1), max(SD3$X1), length.out = 100),
                 X2 = seq(min(SD3$X2), max(SD3$X2), length.out = 100))
Grid <- Grid |> 
  mutate(Train_pred = predict(SVM_fit, newdata = Grid))

head(Grid)
```


## Plotting the results 

```{r}
P3 <- ggplot() +
  geom_tile(data = Grid, aes(X1, X2, fill = Train_pred), alpha = 0.25) +
  geom_point(data = Training_set, aes(X1, X2, color = Group)) +
  scale_color_brewer(type = "qual", palette = "Set1") +
  scale_fill_brewer(type = "qual", palette = "Set1") +
  theme(legend.position = "none") +
  labs(title = "SVM Training")

# Plotting the test data set results 
P4 <- ggplot() +
  geom_tile(data = Grid, aes(X1, X2, fill = Train_pred), alpha = 0.25) +
  geom_point(data = Test_set, aes(X1, X2, color = Group)) +
  scale_color_brewer(type = "qual", palette = "Set1") +
  scale_fill_brewer(type = "qual", palette = "Set1") +
  theme(legend.position = "none") +
  labs(title = "SVM Testing")

plot_grid(P3, P4)
```


## Comparing QDA and SVM

```{r}
plot_grid(P1, P2, P3, P4, ncol = 2)
```


## Complex patterns

```{r}
set.seed(347937)

n <- 500

X <- rmvnorm(n, mean = c(0, 0)) |> as.data.frame() |> 
  rename(X1 = V1,
         X2 = V2)

CP <- data.frame(X) |> 
  mutate(Group = if_else(X1^2 + X2^2 <= 1, "A", "B") |> factor()) |> 
  relocate(Group)

ggplot(CP, aes(X1, X2, color = Group)) +
  geom_point(size = 3) +
  coord_equal() +
  scale_color_brewer(type = "qual", palette = "Set1")

split <- initial_split(CP, strata = Group, prop = 0.75) 

Training_set <- training(split) 
Test_set <- testing(split)

# Fitting SVM to the Training set 
SVM_fit <- svm(Group ~ X1 + X2, 
               data = Training_set, 
               scale = TRUE,
               type = "C-classification", 
               kernel = "radial",
               cost = 5) 

# Predicting the Test set results 
Group_pred <- predict(SVM_fit, newdata = Test_set[, -1]) 
```


## Plotting the results 

```{r}
Grid <- crossing(X1 = seq(min(CP$X1), max(CP$X1), length.out = 100),
                 X2 = seq(min(CP$X2), max(CP$X2), length.out = 100))

Grid <- Grid |> 
  mutate(Train_pred = predict(SVM_fit, newdata = Grid))

P1 <- ggplot() +
  geom_tile(data = Grid, aes(X1, X2, fill = Train_pred), alpha = 0.25) +
  geom_point(data = Training_set, aes(X1, X2, color = Group)) +
  scale_color_brewer(type = "qual", palette = "Set1") +
  scale_fill_brewer(type = "qual", palette = "Set1") +
  theme(legend.position = "none")

# Plotting the test data set results 
P2 <- ggplot() +
  geom_tile(data = Grid, aes(X1, X2, fill = Train_pred), alpha = 0.25) +
  geom_point(data = Test_set, aes(X1, X2, color = Group)) +
  scale_color_brewer(type = "qual", palette = "Set1") +
  scale_fill_brewer(type = "qual", palette = "Set1") +
  theme(legend.position = "none")

plot_grid(P1, P2)
```


## References

::: {#refs}
:::

