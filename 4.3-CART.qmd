---
title: "Classification and Regression Trees"
author:
  - Elizabeth King
  - Kevin Middleton
format:
  revealjs:
    theme: [default, custom.scss]
    standalone: true
    self-contained: true
    logo: QMLS_Logo.png
    slide-number: true
    show-slide-number: all
bibliography: Multivariate.bib
csl: evolution.csl
---


```{r}
#| label: setup
#| echo: false
#| warning: false
#| message: false

library(tidyverse)
library(cowplot)
library(rsample)
library(mvtnorm)

ggplot2::theme_set(theme_cowplot())

SD2 <- read_rds("Data/SD2.rds")
SD3 <- read_rds("Data/SD3.rds")
```

## CRAN Taskview

[Machine Learning](https://cran.r-project.org/web/views/MachineLearning.html)


## CART intro

Original: [@Breiman1984-vv]

[`rpart`: Recursive Partitioning and Regression Trees](https://cran.r-project.org/package=rpart) and `rpart.plot` for plotting

[@Elith2009-py]

[@Elith2008-qs]

[@Fielding2006-xa]

Series of if-else splits

- Like a species key
    - Variables are reused
- "recursive partitioning"
  - No limit to the number of splits that can happen
  - Tree pruning is necessary

Challenges

- What split is "best"?
- When is a node terminal?
- Computationally challenging for large numbers of predictors and/or data


Very general

- Do not have to conform to distributional requirements of multivariate normality
    - Most any kind of data will work
- Creates a set of thresholds for partitioning
    - These do not *necessarily* have any biological meaning
- Robust to extreme values
    - They just become their own terminal node


```{r}
library(rpart)
library(rpart.plot)
library(rsample)

set.seed(34598734)

split <- initial_split(SD3, strata = Group, prop = 0.75) 

Training_set <- training(split) 
Test_set <- testing(split)

tree <- rpart(Group ~ X1 + X2, data = Training_set,
              control = rpart.control(cp = 0.0001))

#view results
printcp(tree)

#identify best cp value to use
best <- tree$cptable[which.min(tree$cptable[ , "xerror"]), "CP"]

#produce a pruned tree based on the best cp value
pruned_tree <- prune(tree, cp = best)

#plot the pruned tree
prp(pruned_tree,
    faclen = 0,
    extra = 1,
    roundint = FALSE,
    digits = 3)

rpart.plot(pruned_tree)


pred.tree <- predict(pruned_tree, Test_set, type = "class")
table(pred.tree, Test_set$Group)

```


## Multivariate Regression Trees



## References

::: {#refs}
:::

